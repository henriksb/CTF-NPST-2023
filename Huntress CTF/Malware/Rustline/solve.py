def xor_decrypt_with_key(encrypted_bytes, key):
    return bytearray(encrypted_bytes[i] ^ key[i % len(key)] for i in range(len(encrypted_bytes)))

def calculate_key(encrypted_bytes, decrypted_bytes):
    return [encrypted_bytes[i] ^ decrypted_bytes[i] for i in range(len(decrypted_bytes))]

def decrypt_file(encrypted_file_path, decrypted_reference_path, target_file_path):
    with open(encrypted_file_path, 'rb') as enc_file, open(decrypted_reference_path, 'rb') as dec_file:
        encrypted_bytes = enc_file.read()
        decrypted_bytes = dec_file.read()
    
    key = calculate_key(encrypted_bytes, decrypted_bytes)

    with open(target_file_path, 'rb') as target_file:
        target_encrypted_bytes = target_file.read()
    
    decrypted_output = xor_decrypt_with_key(target_encrypted_bytes, key)
    
    return decrypted_output.decode('utf-8', errors='ignore')

decrypted_flag = decrypt_file(r'encrypted-files\id_rsa_aws_ec2', r'challenge-files\id_rsa_aws_ec2', r'encrypted-files\flag.txt')
print(decrypted_flag)
